i have a Telegram bot on aiogram, it contains

(MAIN.PY)

import sys
import asyncio
import os
from dotenv import load_dotenv
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.middleware import FSMContextMiddleware, BaseEventIsolation
from keyboards.keyboards import main_menu_keyboard, MAIN_MENU_MESSAGE
from handlers import register_handlers_profile, register_handlers_settings, register_handlers_todo, register_handlers_avito
from utils.event_isolation import CustomEventIsolation
from db.database import init_db

load_dotenv()
TOKEN = os.getenv('API_TOKEN')

init_db()

bot = Bot(
    token=TOKEN,
    session=AiohttpSession(),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

events_isolation = CustomEventIsolation()
dp.update.middleware(FSMContextMiddleware(storage=MemoryStorage(), events_isolation=events_isolation))

register_handlers_profile(dp)
register_handlers_settings(dp)
register_handlers_todo(dp)
register_handlers_avito(dp)

async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="Start the bot"),
        BotCommand(command="/help", description="Help message"),
    ]
    await bot.set_my_commands(commands)

async def send_welcome(message: types.Message):
    await message.answer(MAIN_MENU_MESSAGE, reply_markup=main_menu_keyboard())


dp.message.register(send_welcome, Command(commands=["start", "help"]))

async def main() -> None:
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())

(HANDLERS/AVITO.PY)

from aiogram.enums import ParseMode
from aiogram import Dispatcher, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from keyboards.keyboards import (
    avito_initial_message, avito_direction_message, avito_link_message,
    avito_contact_message, avito_password_message, avito_success_message,
    back_to_main_keyboard, direction_keyboard, skip_contact_keyboard, skip_password_keyboard
)
from utils.utils import add_to_google_sheet  # Import from utils
from db.database import account_increment


class AvitoForm(StatesGroup):
    waiting_for_uid = State()
    waiting_for_username = State()
    waiting_for_direction = State()
    waiting_for_link = State()
    waiting_for_contact = State()
    waiting_for_password = State()

def register_handlers_avito(dp: Dispatcher):
    dp.callback_query.register(start_avito_dialog, lambda c: c.data == 'load_avito')
    dp.message.register(process_username, AvitoForm.waiting_for_username)
    dp.callback_query.register(process_direction, AvitoForm.waiting_for_direction)
    dp.message.register(process_link, AvitoForm.waiting_for_link)
    dp.message.register(process_contact, AvitoForm.waiting_for_contact)
    dp.message.register(process_password, AvitoForm.waiting_for_password)
    dp.callback_query.register(back_to_main, lambda c: c.data == 'back_to_main')
    dp.callback_query.register(skip_contact, lambda c: c.data == 'skip_contact')
    dp.callback_query.register(skip_password, lambda c: c.data == 'skip_password')

async def start_avito_dialog(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(avito_initial_message(), reply_markup=back_to_main_keyboard())
    await state.set_state(AvitoForm.waiting_for_username)

async def process_username(message: types.Message, state: FSMContext):
    await state.update_data(uid=message.from_user.id)
    await state.update_data(username=message.text)
    await message.answer(avito_direction_message(), reply_markup=direction_keyboard())
    await state.set_state(AvitoForm.waiting_for_direction)
    print(message.text)

async def process_direction(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(direction=callback_query.data)
    await callback_query.message.edit_text(avito_link_message(), reply_markup=None)
    await state.set_state(AvitoForm.waiting_for_link)

async def process_link(message: types.Message, state: FSMContext):
    await state.update_data(link=message.text)
    msg = await message.answer(avito_contact_message(), reply_markup=skip_contact_keyboard(), parse_mode=ParseMode.HTML)
    await state.update_data(contact_message_id=msg.message_id)
    await state.set_state(AvitoForm.waiting_for_contact)

async def process_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    await message.bot.delete_message(chat_id=message.chat.id, message_id=data['contact_message_id'])
    msg = await message.answer(avito_password_message(), reply_markup=skip_password_keyboard(), parse_mode=ParseMode.HTML)
    await state.update_data(password_message_id=msg.message_id)
    await state.set_state(AvitoForm.waiting_for_password)

async def skip_contact(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback_query.message.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=data['contact_message_id'])
    await state.update_data(contact='*', password='*')
    user_data = await state.get_data()
    await state.clear()
    await store_data(callback_query.message, user_data)

async def process_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.bot.delete_message(chat_id=message.chat.id, message_id=data['password_message_id'])
    user_data = await state.get_data()
    user_data['password'] = message.text
    await state.clear()
    await store_data(message, user_data)

async def skip_password(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback_query.message.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=data['password_message_id'])
    user_data = await state.get_data()
    user_data['password'] = '*'
    await state.clear()
    await store_data(callback_query.message, user_data)


async def store_data(message: types.Message, user_data: dict):
    data = [
        user_data['uid'],
        user_data['username'],
        user_data['direction'],
        user_data['link'],
        user_data['contact'],
        user_data['password']
    ]
    add_to_google_sheet(data)
    account_increment(user_data['uid'])
    await message.answer(avito_success_message(), reply_markup=back_to_main_keyboard())

async def back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'contact_message_id' in data:
        await callback_query.message.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    if 'password_message_id' in data:
        await callback_query.message.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await callback_query.message.edit_text(MAIN_MENU_MESSAGE, reply_markup=main_menu_keyboard())
    await state.clear()

(HANDLERS/PROFILE.PY)

from aiogram import Dispatcher, types
from keyboards.keyboards import profile_menu_keyboard, PROFILE_MENU_MESSAGE
from db.database import get_user

def register_handlers_profile(dp: Dispatcher):
    dp.callback_query.register(profile_menu, lambda c: c.data == 'profile')
    dp.callback_query.register(back_to_main, lambda c: c.data == 'back_to_main')

async def profile_menu(callback_query: types.CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if user is not None:
        user_info = {
            "uid": user[0],
            "name": user[1],
            "direction": user[2],
            "accounts": user[3]
        }
    else:
        user_info = {
            "uid": callback_query.from_user.id,
            "name": callback_query.from_user.full_name,
            "direction": "unknown",
            "accounts": 0
        }

    message = PROFILE_MENU_MESSAGE.format(
        uid=user_info["uid"],
        name=user_info["name"],
        direction=user_info["direction"],
        accounts=user_info["accounts"]
    )
    await callback_query.message.edit_text(message, reply_markup=profile_menu_keyboard())

async def back_to_main(callback_query: types.CallbackQuery):
    from keyboards.keyboards import main_menu_keyboard, MAIN_MENU_MESSAGE
    await callback_query.message.edit_text(MAIN_MENU_MESSAGE, reply_markup=main_menu_keyboard())

(HANDLERS/SETTINGS.PY)

from aiogram import Dispatcher, types
from keyboards.keyboards import settings_menu_keyboard, SETTINGS_MENU_MESSAGE

def register_handlers_settings(dp: Dispatcher):
    dp.callback_query.register(settings_menu, lambda c: c.data == 'settings')
    dp.callback_query.register(back_to_main, lambda c: c.data == 'back_to_main')

async def settings_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(SETTINGS_MENU_MESSAGE, reply_markup=settings_menu_keyboard())

async def back_to_main(callback_query: types.CallbackQuery):
    from keyboards.keyboards import main_menu_keyboard, MAIN_MENU_MESSAGE
    await callback_query.message.edit_text(MAIN_MENU_MESSAGE, reply_markup=main_menu_keyboard())

(HANDLERS/TODO.PY)

from aiogram import Dispatcher, types

def register_handlers_todo(dp: Dispatcher):
    dp.callback_query.register(todo_menu, lambda c: c.data == 'todo')
    dp.callback_query.register(back_to_main, lambda c: c.data == 'back_to_main')

async def todo_menu(callback_query: types.CallbackQuery):
    await callback_query.answer("Todo event handled")

async def back_to_main(callback_query: types.CallbackQuery):
    from keyboards.keyboards import main_menu_keyboard, MAIN_MENU_MESSAGE
    await callback_query.message.edit_text(MAIN_MENU_MESSAGE, reply_markup=main_menu_keyboard())

(KEYBOARDS/KEYBOARDS.PY)

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def first_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Code", callback_data='dir_code')],
        [InlineKeyboardButton(text="Design", callback_data='dir_design')],
        [InlineKeyboardButton(text="Photo", callback_data='dir_photo')]
    ])
    return keyboard


def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Profile", callback_data='profile')],
        [InlineKeyboardButton(text="Settings", callback_data='settings')],
        [InlineKeyboardButton(text="Todo", callback_data='todo')],
        [InlineKeyboardButton(text="Load Avito Account", callback_data='load_avito')]
    ])
    return keyboard

def profile_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Feature 1", callback_data='feature_1')],
        [InlineKeyboardButton(text="Feature 2", callback_data='feature_2')],
        [InlineKeyboardButton(text="Feature 3", callback_data='feature_3')],
        [InlineKeyboardButton(text="Feature 4", callback_data='feature_4')],
        [InlineKeyboardButton(text="Back", callback_data='back_to_main')]
    ])
    return keyboard

def settings_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Feature 1", callback_data='feature_1')],
        [InlineKeyboardButton(text="Feature 2", callback_data='feature_2')],
        [InlineKeyboardButton(text="Feature 3", callback_data='feature_3')],
        [InlineKeyboardButton(text="Feature 4", callback_data='feature_4')],
        [InlineKeyboardButton(text="Back", callback_data='back_to_main')]
    ])
    return keyboard

def avito_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Next", callback_data='next')],
        [InlineKeyboardButton(text="Back", callback_data='back_to_main')]
    ])
    return keyboard

def back_to_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Back to Main Menu", callback_data='back_to_main')]
    ])
    return keyboard

def skip_contact_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Skip", callback_data='skip_contact')],
        [InlineKeyboardButton(text="Back to Main Menu", callback_data='back_to_main')]
    ])
    return keyboard

def skip_password_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Skip", callback_data='skip_password')],
        [InlineKeyboardButton(text="Back to Main Menu", callback_data='back_to_main')]
    ])
    return keyboard

def direction_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Code", callback_data='code')],
        [InlineKeyboardButton(text="Design", callback_data='design')],
        [InlineKeyboardButton(text="Photo", callback_data='photo')]
    ])
    return keyboard

MAIN_MENU_MESSAGE = "Main Menu"
PROFILE_MENU_MESSAGE = "Profile Menu:\n\nInfo:\nTelegram UID: {uid}\nName: {name}\nDirection: {direction}\nLoaded Avito Accounts: {accounts}"
SETTINGS_MENU_MESSAGE = "Settings Menu: dsfjkljsdklfjklsdjklj;lkaf"
TODO_MENU_MESSAGE = "Todo Menu"
AVITO_MENU_MESSAGE = "Wanna load Avito Account?\n\nFirst of all get me the name of Account"

def avito_initial_message():
    return "Wanna load Avito Account?\n\nFirst of all, get me the name of the account"

def avito_direction_message():
    return "Send me the account's direction"

def avito_link_message():
    return "Send me the advertisement's link"

def avito_contact_message():
    return "Now send me the account's mail/phone\n\n<b>Optional</b>"

def avito_password_message():
    return "Send me the pass\n\n<b>Optional</b>"

def avito_success_message():
    return "Account data has been successfully saved!"

(UTILS/EVENT_ISOLATON.PY)

from aiogram.fsm.middleware import BaseEventIsolation
import asyncio
from contextlib import asynccontextmanager

class CustomEventIsolation(BaseEventIsolation):
    def __init__(self):
        self._locks = {}

    @asynccontextmanager
    async def lock(self, key: str):
        if key not in self._locks:
            self._locks[key] = asyncio.Lock()
        async with self._locks[key]:
            yield

    async def close(self):
        self._locks.clear()

(UTILS/UTILS.PY)

import gspread
from google.oauth2.service_account import Credentials

def add_to_google_sheet(data):
    client = gspread.service_account()
    sheet = client.open('TelegramBotData').sheet1
    sheet.append_row(data)

(DB/DATABASE.PY)

import sqlite3

def init_db():
    conn = sqlite3.connect('db/users.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            uid INTEGER PRIMARY KEY,
            name TEXT,
            direction TEXT,
            avito_accounts INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

def add_user(uid, name, direction):
    conn = sqlite3.connect('db/users.db')
    c = conn.cursor()
    c.execute('INSERT INTO users (uid, name, direction) VALUES (?, ?, ?)', (uid, name, direction))
    conn.commit()
    conn.close()

def get_user(uid):
    conn = sqlite3.connect('db/users.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE uid = ?', (uid,))
    user = c.fetchone()
    conn.close()
    return user

def account_increment(uid):
    uid = int(uid)
    conn = sqlite3.connect('db/users.db')
    c = conn.cursor()
    c.execute('SELECT avito_accounts FROM users WHERE uid = ?', (uid,))
    counter = sum(c.fetchone())
    counter += 1
    c.execute('UPDATE users SET avito_accounts = ? WHERE uid = ?', (counter, uid))

    conn.commit()
    conn.close()

can you edit them for me?